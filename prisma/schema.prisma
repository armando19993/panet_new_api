generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String        @id @default(uuid())
  publicId    Int           @unique @default(autoincrement())
  name        String        @unique
  permissions Permissions[]
  users       UserRole[] // Relación con la tabla intermedia
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Module {
  id          String        @id @default(uuid())
  publicId    Int           @unique @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Permissions Permissions[]
}

model Permissions {
  id        String   @id @default(uuid())
  publicId  Int      @unique @default(autoincrement())
  name      String
  slug      String
  module    Module   @relation(fields: [moduleId], references: [id])
  moduleId  String
  roles     Role[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                  String              @id @default(uuid())
  publicId            Int                 @unique @default(autoincrement())
  name                String
  user                String              @unique
  password            String
  phone               String?
  roles               UserRole[] // Relación con la tabla intermedia
  referredBy          String?
  referrer            User?               @relation("UserReferrals", fields: [referredBy], references: [id])
  referrals           User[]              @relation("UserReferrals")
  profitPercent       Decimal             @default(0.00) @db.Decimal(10, 2)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  expoPushToken       String?
  status              WalletStatus        @default(ACTIVO)
  wallets             Wallet[]            @relation("UserWallets")
  clientes            Client[]
  Recharge            Recharge[]
  WalletRequest       WalletRequest[]
  ColaEspera          ColaEspera[]
  InstrumentsClient   InstrumentsClient[]
  Transaction         Transaction[]       @relation("ClienteTransaction")
  TransactionDespacho Transaction[]       @relation("DespachadorTransaction")
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  roleId    String
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([userId, roleId]) // Evita duplicados para la misma relación
}

model Country {
  id                  String              @id @default(uuid())
  publicId            Int                 @unique @default(autoincrement())
  name                String
  abbreviation        String
  currency            String
  profit              Decimal             @default(0.00) @db.Decimal(10, 2)
  ven_profit          Decimal             @default(0.00) @db.Decimal(10, 2)
  especial_profit     Decimal             @default(0.00) @db.Decimal(10, 2)
  rate_purchase       Decimal             @default(0.00) @db.Decimal(10, 2)
  rate_sales          Decimal             @default(0.00) @db.Decimal(10, 2)
  rate_wholesale      Decimal             @default(0.00) @db.Decimal(10, 2)
  status              Int                 @default(1)
  code                String
  amount              Int                 @default(0)
  wallets             Wallet[]            @relation("CountryWallets")
  banks               Bank[]
  accountTypes        AccountType[]
  typesDocuments      TypesDocuments[]    @relation("CountryTypesDocuments")
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  InstrumentsClient   InstrumentsClient[]
  WalletRequest       WalletRequest[]
  RateOrigin          Rate[]              @relation("Origin")
  RateDestinarion     Rate[]              @relation("Destination")
  TransactionsOrigen  Transaction[]       @relation("OrigenTransaction")
  TransactionsDestino Transaction[]       @relation("DestinoTransaction")
}

model Bank {
  id                String              @id @default(uuid())
  publicId          Int                 @unique @default(autoincrement())
  name              String // Nombre del banco
  code              String? // Código del banco
  countryId         String
  country           Country             @relation(fields: [countryId], references: [id]) // Relación con país
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  InstrumentsClient InstrumentsClient[]
}

model AccountType {
  id                String              @id @default(uuid())
  publicId          Int                 @unique @default(autoincrement())
  name              String
  countryId         String
  country           Country             @relation(fields: [countryId], references: [id]) // Relación con país
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  InstrumentsClient InstrumentsClient[]
}

model TypesDocuments {
  id        String   @id @default(uuid())
  publicId  Int      @unique @default(autoincrement())
  name      String
  country   Country  @relation("CountryTypesDocuments", fields: [countryId], references: [id])
  countryId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WalletRequest {
  id               String      @id @default(uuid())
  publicId         Int         @unique @default(autoincrement())
  consumer_id_type String //tipo de documento
  consumer_id      String // numero de documento
  front_document   String // fontral del documento
  back_document    String // back del documento
  selfie_document  String // selfie del documento
  name_document    String
  wallet_state     WalletState @default(ENREVISION)
  user             User        @relation(fields: [userId], references: [id])
  userId           String
  country          Country     @relation(fields: [countryId], references: [id])
  countryId        String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  Wallet           Wallet[]
}

model Wallet {
  id               String               @id @default(uuid())
  publicId         Int                  @unique @default(autoincrement())
  consumer_id_type String?
  consumer_id      String?
  type             WalletType
  balance          Decimal              @default(0.00) @db.Decimal(10, 2)
  user             User                 @relation("UserWallets", fields: [userId], references: [id])
  userId           String
  country          Country              @relation("CountryWallets", fields: [countryId], references: [id])
  countryId        String
  request          WalletRequest?        @relation(fields: [walletRequestId], references: [id])
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  transactions     WalletTransactions[] @relation("TransactionWallets")
  gastos           Gastos[]             @relation("GastosWallet")
  status           WalletStatus         @default(ACTIVO)
  Recharge         Recharge[]
  Transaction      Transaction[]        @relation("WalletTransaction")
  walletRequestId  String?

  @@unique([userId, countryId, type])
}

model WalletTransactions {
  id          String          @id @default(uuid())
  publicId    Int             @unique @default(autoincrement())
  amount      Decimal         @default(0.00) @db.Decimal(10, 2)
  amount_old  Decimal         @default(0.00) @db.Decimal(10, 2)
  amount_new  Decimal         @default(0.00) @db.Decimal(10, 2)
  description String?
  type        TypeTransaction
  wallet      Wallet          @relation("TransactionWallets", fields: [walletId], references: [id])
  walletId    String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Gastos {
  id               String        @id @default(uuid())
  publicId         Int           @unique @default(autoincrement())
  amount           Decimal       @default(0.00) @db.Decimal(10, 2)
  description      String
  comprobante      String
  wallet           Wallet        @relation("GastosWallet", fields: [walletId], references: [id])
  walletId         String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  registrosDiarios LibroDiario[]
}

model LibroDiario {
  id          String   @id @default(uuid())
  publicId    Int      @unique @default(autoincrement())
  description String
  debe        Decimal  @default(0.00) @db.Decimal(10, 2)
  haber       Decimal  @default(0.00) @db.Decimal(10, 2)
  saldo       Decimal  @default(0.00) @db.Decimal(10, 2)
  gasto       Gastos   @relation(fields: [gastoId], references: [id])
  gastoId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Client {
  id             String              @id @default(uuid())
  publicId       Int                 @unique @default(autoincrement())
  name           String
  document       String              @unique
  phone          String
  email          String?
  intermediaryId String?
  intermediary   User?               @relation(fields: [intermediaryId], references: [id])
  instruments    InstrumentsClient[]
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  Transaction    Transaction[]       @relation("ClientTransaction")
  recharges      Recharge[]          @relation("ClientRecharges")
}

model InstrumentsClient {
  id             String          @id @default(uuid())
  publicId       Int             @unique @default(autoincrement())
  document       String?
  profit         Decimal         @default(0.00) @db.Decimal(10, 2)
  holder         String
  accountNumber  String
  accountTypeId  String?
  accountType    AccountType?    @relation(fields: [accountTypeId], references: [id])
  countryId      String
  country        Country         @relation(fields: [countryId], references: [id])
  bankId         String?
  bank           Bank?           @relation(fields: [bankId], references: [id])
  typeInstrument TypesInstrumens
  useInstruments USE_INSTRUMENTS @default(CLIENT)
  Client         Client?         @relation(fields: [clientId], references: [id])
  clientId       String?
  user           User?           @relation(fields: [userId], references: [id])
  userId         String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  Recharge       Recharge[]
  Transaction    Transaction[]   @relation("InstrumentTransaction")
}

model Recharge {
  id                  String                @id @default(uuid())
  publicId            Int                   @unique @default(autoincrement())
  amount              Decimal               @default(0.00) @db.Decimal(10, 2)
  wallet              Wallet                @relation(fields: [walletId], references: [id])
  walletId            String
  user                User                  @relation(fields: [userId], references: [id])
  userId              String
  type                TypeRecharge
  status              StatusRecharge
  comprobante         String?
  comentario          String?
  nro_referencia      String?
  fecha_comprobante   DateTime?             @db.Date
  instrumentId        String?
  instrument          InstrumentsClient?    @relation(fields: [instrumentId], references: [id])
  pasarela_response   Json?
  gananciDespachador  Decimal?              @default(0.00) @db.Decimal(10, 2)
  saldoPanet          Decimal?              @default(0.00) @db.Decimal(10, 2)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  ColaEspera          ColaEspera[]
  Client              Client?               @relation("ClientRecharges", fields: [clientId], references: [id])
  clientId            String?
  TransactionTemporal TransactionTemporal[]
}

model Rate {
  id            String   @id @default(uuid())
  publicId      Int      @unique @default(autoincrement())
  originId      String
  origin        Country  @relation("Origin", fields: [originId], references: [id])
  destinationId String
  destination   Country  @relation("Destination", fields: [destinationId], references: [id])
  type_profit   String?
  amount        Decimal  @default(0.00) @db.Decimal(10, 4)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  countryId     String?
}

model ColaEspera {
  id            String       @id @default(uuid())
  publicId      Int          @unique @default(autoincrement())
  rechargeId    String?
  recharge      Recharge?    @relation(fields: [rechargeId], references: [id])
  transactionId String?
  transaction   Transaction? @relation("ColaTransaction", fields: [transactionId], references: [id])
  userId        String
  user          User         @relation(fields: [userId], references: [id])
  type          TypeCola
  status        STATUS_COLA
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@unique([rechargeId, userId, type])
  @@unique([transactionId, userId, type])
}

model Transaction {
  id                    String             @id @default(uuid())
  publicId              Int                @unique @default(autoincrement())
  creadorId             String
  creador               User               @relation("ClienteTransaction", fields: [creadorId], references: [id])
  walletId              String
  wallet                Wallet             @relation("WalletTransaction", fields: [walletId], references: [id])
  clienteId             String?
  cliente               Client?            @relation("ClientTransaction", fields: [clienteId], references: [id])
  instrumentId          String
  instrument            InstrumentsClient  @relation("InstrumentTransaction", fields: [instrumentId], references: [id])
  origenId              String
  origen                Country            @relation("OrigenTransaction", fields: [origenId], references: [id])
  destinoId             String
  destino               Country            @relation("DestinoTransaction", fields: [destinoId], references: [id])
  montoOrigen           Decimal            @default(0.00) @db.Decimal(10, 3)
  montoDestino          Decimal            @default(0.00) @db.Decimal(10, 3)
  montoTasa             Decimal            @default(0.00) @db.Decimal(10, 3)
  monedaOrigen          String
  monedaDestino         String
  montoComisionPasarela Decimal            @default(0.00) @db.Decimal(10, 3)
  gananciaIntermediario Decimal            @default(0.00) @db.Decimal(10, 3)
  gastosAdicionales     Decimal            @default(0.00) @db.Decimal(10, 3)
  gananciaPanet         Decimal            @default(0.00) @db.Decimal(10, 3)
  nro_referencia        String?
  comprobante           String?
  observacion           String?
  status                StatusTransactions @default(CREADA)
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  ColaEspera            ColaEspera[]       @relation("ColaTransaction")
  despachador           User?              @relation("DespachadorTransaction", fields: [despachadorId], references: [id])
  despachadorId         String?
}

model TransactionTemporal {
  id           String                     @id @default(uuid())
  publicId     Int                        @unique @default(autoincrement())
  creadorId    String
  walletId     String
  clienteId    String
  instrumentId String
  origenId     String
  destinoId    String
  montoOrigen  Decimal                    @db.Decimal(10, 2)
  status       StatusTransactionsTemporal
  recharge     Recharge                   @relation(fields: [rechargeId], references: [id])
  createdAt    DateTime                   @default(now())
  updatedAt    DateTime                   @updatedAt
  rechargeId   String
}

enum WalletType {
  RECEPCION
  RECARGA
  GANANCIAS
}

enum TypeRecharge {
  AUTOMATIZADO
  MANUAL
}

enum TypeTransaction {
  DEPOSITO
  RETIRO
}

enum StatusRecharge {
  CREADA
  CANCELADA
  COMPLETADA
}

enum TypesRecharges {
  AUTOMATICA
  MANUAL
}

enum TypesInstrumens {
  PAGO_MOVIL
  CUENTA_BANCARIA
  CUENTA_DIGITAL
  BILLETERA_MOVIL
}

enum USE_INSTRUMENTS {
  PANET
  CLIENT
}

enum TypeCola {
  RECARGA
  TRANSACCION
}

enum STATUS_COLA {
  INICIADA
  CERRADA
}

enum StatusTransactions {
  CREADA
  OBSERVADA
  ANULADA
  COMPLETADA
}

enum StatusTransactionsTemporal {
  CREADA
  RECHAZADA
  APROBADA
}

enum WalletState {
  APROBADO
  RECHAZADO
  ENREVISION
}

enum WalletStatus {
  ACTIVO
  BLOQUEADO
  INACTIVO
}
